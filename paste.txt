login.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Professor Login</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@700&family=Open+Sans&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f4f4f9;
        }

        .login-container {
            background-color: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            width: 300px;
            text-align: center;
        }

        .login-container h1 {
            margin-bottom: 20px;
        }

        .login-container input {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        .login-container button {
            width: 100%;
            padding: 10px;
            background-color: #007BFF;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .login-container button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="row justify-content-center align-items-center min-vh-100">
            <div class="col-md-6 col-lg-4">
                <div class="card shadow-sm">
                    <div class="card-body p-5">
                        <h3 class="text-center mb-4">Professor Login</h3>
                        <form id="loginForm">
                            <div class="mb-3">
                                <label for="username" class="form-label">Username</label>
                                <input type="text" class="form-control" id="username" placeholder="Enter Username" required>
                            </div>
                            <div class="mb-3">
                                <label for="password" class="form-label">Password</label>
                                <input type="password" class="form-control" id="password" placeholder="Enter Password" required>
                            </div>
                            <button type="submit" class="btn btn-primary w-100">Login</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.getElementById("loginForm").addEventListener("submit", function (event) {
            // Prevent the form from refreshing the page
            event.preventDefault();

            // Hardcoded credentials
            const correctUsername = "admin"; // Hardcoded username
            const correctPassword = "password"; // Hardcoded password

            // Get input values
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;

            // Check credentials
            if (username === correctUsername && password === correctPassword) {
                // Redirect to dashboard.html on successful login
                window.location.href = "dashboard.html";
            } else {
                alert("Invalid username or password. Please try again.");
            }
        });
    </script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
</body>
</html>


dashboard.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Professor Dashboard</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/css/bootstrap-datepicker.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap"> 
</head>
<body style="background-color: #f4f4f4; font-family: 'Roboto', sans-serif;"> 

    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand">ATTENDANCE SYSTEM</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link active" href="dashboard.html">Mark Attendance</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="student_management.html">Manage Students</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="attendance_report.html">Reports</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="login.html">Logout</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="row mb-4">
            <div class="col-md-4">
                <label for="divisionSelect">Select Division</label>
                <select class="form-select" id="divisionSelect">
                    <option value="">Select Division</option>
                    <option value="1">Division A</option>
                    <option value="2">Division B</option>
                </select>                
            </div>
            <div class="col-md-4">
                <label for="dateSelect">Select Date</label>
                <input type="text" class="form-control" id="dateSelect" placeholder="Select Date">
            </div>
        </div>

        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Mark Attendance</h5>
            </div>
            <div class="card-body">
                <form id="attendanceForm">
                    <table class="table" id="attendanceTable">
                        <thead>
                            <tr>
                                <th>Roll No</th>
                                <th>Student Name</th>
                                <th>Attendance</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Dynamically populated rows -->
                        </tbody>
                    </table>
                    <button type="submit" class="btn btn-primary" id="saveAttendanceBtn" disabled>Save Attendance</button>
                </form>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/js/bootstrap-datepicker.min.js"></script>

    <script>
// Fetch students based on the selected division
function fetchStudents(division) {
    const token = localStorage.getItem('token'); // Get the token from local storage

    $.ajax({
        url: '/api/students',  // Your API endpoint
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${token}` // Include the token in the request
        },
        data: { division },  // Send division as a query parameter (division_id)
        success: function(response) {
            populateTable(response.students);  // Populate the table with student data
        },
        error: function(xhr) {
            alert('Failed to fetch students: ' + (xhr.responseJSON ? xhr.responseJSON.error : 'Unknown error'));
        }
    });
}

// Handle division selection change
document.getElementById('divisionSelect').addEventListener('change', function() {
    const division = this.value;
    if (division) {
        fetchStudents(division);  // Fetch students when division is selected
    }
});


// Populate the table with student data
function populateTable(students) {
    const tbody = document.getElementById('attendanceTable').getElementsByTagName('tbody')[0];
    tbody.innerHTML = '';  // Clear any existing rows

    students.forEach(student => {
        const row = tbody.insertRow();
        const rollNoCell = row.insertCell(0);
        const nameCell = row.insertCell(1);
        const attendanceCell = row.insertCell(2);

        rollNoCell.textContent = student.roll_no;
        nameCell.textContent = student.name;
        
        // Add a dropdown or radio buttons for attendance options
        const attendanceDropdown = document.createElement('select');
        attendanceDropdown.innerHTML = `
            <option value="present">Present</option>
            <option value="absent">Absent</option>
        `;
        attendanceCell.appendChild(attendanceDropdown);
    });

    // Enable the "Save Attendance" button
    document.getElementById('saveAttendanceBtn').disabled = false;
}

// Handle division selection change
document.getElementById('divisionSelect').addEventListener('change', function() {
    const division = this.value;
    if (division) {
        fetchStudents(division);  // Fetch students when division is selected
    }
});

    </script>
</body>
</html>


student_management.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Students</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap"> 
</head>
<body style="background-color: #f4f4f4; font-family: 'Roboto', sans-serif;">
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand">ATTENDANCE SYSTEM</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="dashboard.html">Mark Attendance</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="student_management.html">Manage Students</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="attendance_report.html">Reports</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="login.html">Logout</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="row">
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Add New Student</h5>
                    </div>
                    <div class="card-body">
                        <form id="addStudentForm">
                            <div class="mb-3">
                                <label for="rollNo" class="form-label">Roll No</label>
                                <input type="text" class="form-control" id="rollNo" placeholder="Enter Roll No" required>
                            </div>
                            <div class="mb-3">
                                <label for="studentName" class="form-label">Student Name</label>
                                <input type="text" class="form-control" id="studentName" placeholder="Enter Student Name" required>
                            </div>
                            <button type="submit" class="btn btn-primary">Add Student</button>
                        </form>                        
                    </div>
                </div>
            </div>
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Student List</h5>
                    </div>
                    <div class="card-body">
                        <table class="table" id="studentListTable">
                            <thead>
                                <tr>
                                    <th>Roll No</th>
                                    <th>Name</th>
                                    <th>Division</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
document.getElementById("addStudentForm").addEventListener("submit", function(event) {
    event.preventDefault(); // Prevent default form submission

    const rollNo = document.getElementById('rollNo').value;
    const studentName = document.getElementById('studentName').value;

    // Validate input
    if (!rollNo || !studentName) {
        alert("Please fill in all fields.");
        return;
    }

    const token = localStorage.getItem('token'); // Get the token from local storage

    fetch('http://localhost:3000/api/students', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}` // Include the token in the request
        },
        body: JSON.stringify({ roll_no: rollNo, name: studentName })
    })
    .then(response => {
        if (!response.ok) throw new Error('Error adding student: ' + response.statusText);
        return response.json();
    })
    .then(data => {
        alert("Student added successfully!");
        document.getElementById("addStudentForm").reset(); // Reset the form
        fetchStudents(); // Optionally refresh the student list
    })
    .catch(error => alert(error.message));
});

    </script> 
</body>
</html>

attendance_report.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Attendance Reports</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap"> 
</head>
<body style="background-color: #f4f4f4; font-family: 'Roboto', sans-serif;">
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand">ATTENDANCE SYSTEM</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="dashboard.html">Mark Attendance</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="student_management.html">Manage Students</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="attendance_report.html">Reports</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="login.html">Logout</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="row mb-4">
            <div class="col-md-4">
                <label for="monthSelect">Select Month</label>
                <select class="form-select" id="monthSelect">
                    <option value="">Select Month</option>
                    <option value="1">January</option>
                    <option value="2">February</option>
                    <option value="3">March</option>
                    <option value="4">April</option>
                    <option value="5">May</option>
                    <option value="6">June</option>
                    <option value="7">July</option>
                    <option value="8">August</option>
                    <option value="9">September</option>
                    <option value="10">October</option>
                    <option value="11">November</option>
                    <option value="12">December</option>
                </select>
            </div>
            <div class="col-md-4">
                <label for="divisionSelect">Select Division</label>
                <select class="form-select" id="divisionSelect">
                    <option value="">Select Division</option>
                    <option value="A">Division A</option>
                    <option value="B">Division B</option>
                </select>
            </div>
        </div>

        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Monthly Attendance Report</h5>
            </div>
            <div class="card-body">
                <table class="table" id="attendanceReportTable">
                    <thead>
                        <tr>
                            <th>Roll No</th>
                            <th>Student Name</th>
                            <th>Present Days</th>
                            <th>Absent Days</th>
                            <th>Attendance %</th>
                        </tr>
                    </thead>
                    <tbody>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="attendance_report.js"></script> 
</body>
</html>

app.js:
const express = require('express');
const cors = require('cors');
const sqlite3 = require('sqlite3').verbose();
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

const port = 3000;
const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Database connection
const db = new sqlite3.Database('./library.db', (err) => {
    if (err) {
        console.error('Error connecting to database:', err);
    } else {
        console.log('Connected to SQLite database');
    }
});


const getProfessorByUsername = (username) => {
    return new Promise((resolve, reject) => {
        db.get("SELECT * FROM professors WHERE username = ?", [username], (err, row) => {
            if (err) {
                return reject(err);
            }
            resolve(row);
        });
    });
};

// JWT Middleware
const authenticateToken = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1]; // Extract token from header
    
    if (!token) {
        return res.status(401).json({ error: 'Access denied' });
    }

    jwt.verify(token, process.env.SECRET_KEY, (err, user) => {
        if (err) {
            return res.status(403).json({ error: 'Invalid token' });
        }
        req.user = user; // Attach user info to request object
        next();
    });
};

// Function to get students by division
const getStudentsByDivision = (division) => {
    return new Promise((resolve, reject) => {
        db.all("SELECT * FROM students WHERE division_id = ?", [division], (err, rows) => {
            if (err) {
                return reject(err);
            }
            resolve(rows);
        });
    });
};

// Add a new student route with authentication
app.post('/api/students', authenticateToken, (req, res) => {
    const { roll_no, name } = req.body;

    // Validate input
    if (!roll_no || !name) {
        return res.status(400).json({ error: 'Roll No and Name are required' });
    }

    // Insert student into the database
    db.run("INSERT INTO students (roll_no, name) VALUES (?, ?)", [roll_no, name], function(err) {
        if (err) {
            console.error("Error adding student:", err);
            return res.status(500).json({ error: 'Database error' });
        }
        
        res.status(201).json({ message: 'Student added successfully', id: this.lastID });
    });
});


// Routes

// Professor Registration
app.post('/api/register', async (req, res) => {
    try {
        const { username, password } = req.body;

        // Validate input
        if (!username || !password) {
            return res.status(400).json({ error: 'Username and password are required' });
        }

        // Check if username already exists
        const existingProfessor = await getProfessorByUsername(username);
        if (existingProfessor) {
            return res.status(400).json({ error: 'Username already exists' });
        }

        // Hash the password before storing it
        const hashedPassword = await bcrypt.hash(password, 10);

        // Insert new professor into the database
        db.run("INSERT INTO professors (username, password) VALUES (?, ?)", [username, hashedPassword], function(err) {
            if (err) {
                console.error("Error inserting professor:", err);
                return res.status(500).json({ error: 'Database error' });
            }
            res.status(201).json({ message: 'Professor registered successfully' });
        });
    } catch (err) {
        console.error("Error during registration:", err);
        return res.status(500).json({ error: 'Server error' });
    }
});

// Professor Authentication
app.post('/api/login', async (req, res) => {
    try {
        const { username, password } = req.body;

        // Validate input
        if (!username || !password) {
            return res.status(400).json({ error: 'Username and password are required' });
        }

        const professor = await getProfessorByUsername(username);
        
        if (!professor) {
            return res.status(401).json({ error: 'Invalid credentials' });
        }
        
        const validPassword = await bcrypt.compare(password, professor.password);
        if (!validPassword) {
            return res.status(401).json({ error: 'Invalid credentials' });
        }
        
        const token = jwt.sign({ id: professor.id }, process.env.SECRET_KEY);
        res.json({ token });
    } catch (err) {
        console.error("Error during login:", err);
        return res.status(500).json({ error: 'Server error' });
    }
});

app.post('/api/students', async (req, res) => {
    try {
        const { roll_no, name } = req.body;

        // Validate input
        if (!roll_no || !name) {
            return res.status(400).json({ error: 'Roll No and Name are required' });
        }

        // Insert student into the database
        db.run("INSERT INTO students (roll_no, name) VALUES (?, ?)", [roll_no, name], function(err) {
            if (err) {
                console.error("Error adding student:", err);
                return res.status(500).json({ error: 'Database error' });
            }
            res.status(201).json({ message: 'Student added successfully', id: this.lastID });
        });
    } catch (err) {
        console.error("Error during adding student:", err);
        return res.status(500).json({ error: 'Server error' });
    }
});


// Fetch students by division
app.get('/api/students', authenticateToken, (req, res) => {
    const division = req.query.division;
    
    if (!division) {
        return res.status(400).json({ error: 'Division is required' });
    }

    db.all("SELECT * FROM students WHERE division_id = ?", [division], (err, students) => {
        if (err) {
            return res.status(500).json({ error: 'Database error' });
        }
        
        res.json({ students });
    });
});

// Add a new student
app.post('/api/students', (req, res) => {
    const { roll_no, name } = req.body;

    // Validate input
    if (!roll_no || !name) {
        return res.status(400).json({ error: 'Roll No and Name are required' });
    }

    // Insert student into the database
    db.run("INSERT INTO students (roll_no, name) VALUES (?, ?)", [roll_no, name], function(err) {
        if (err) {
            console.error("Error adding student:", err);
            return res.status(500).json({ error: 'Database error' });
        }
        
        res.status(201).json({ message: 'Student added successfully', id: this.lastID });
    });
});


// Start server
app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});

library.db:

-- Create the 'professors' table
sqlite> CREATE TABLE professors (
   ...>     id INTEGER PRIMARY KEY AUTOINCREMENT,
   ...>     username TEXT UNIQUE,
   ...>     password TEXT
   ...> );
sqlite> 
sqlite> -- Create the 'students' table
sqlite> CREATE TABLE students (
   ...>     id INTEGER PRIMARY KEY AUTOINCREMENT,
   ...>     name TEXT,
   ...>     roll_no TEXT UNIQUE,
   ...>     division_id INTEGER,
   ...>     FOREIGN KEY (division_id) REFERENCES divisions(id)
   ...> );
sqlite> 
sqlite> -- Create the 'divisions' table
sqlite> CREATE TABLE divisions (
   ...>     id INTEGER PRIMARY KEY AUTOINCREMENT,
   ...>     name TEXT
   ...> );


